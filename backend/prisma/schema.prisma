// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  ADMIN
}

//User Model 
model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String?  @unique
  password    String
  accessToken String?
  role        Role     @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Client {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  lastname    String
  phoneNumber String
  email       String   @default("david.maloney@utp.ac.pa")
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  ident       String
  sales       Sale[]   @relation("ClientToSale")
}

model Sale {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId   Int          @default(0)
  saleDate    DateTime     @default(now())
  createdDate DateTime     @default(now())
  updatedDate DateTime     @updatedAt
  clientId    String       @db.ObjectId
  clients     Client       @relation("ClientToSale", fields: [clientId], references: [id], onDelete: Cascade)
  details     SaleDetail[] @relation("SaleToSaleDetail")
  paymentDetail    Payment[]    @relation("SaleToPayment")
  Payment     Float     @default(0)
  TotalSale   Float     @default(0)

  @@index([clientId])
}

model SaleDetail {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  product     String
  quantity    Int
  price       Float
  tax         Float
  discount    Float
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  saleId      String   @db.ObjectId
  sales       Sale     @relation("SaleToSaleDetail", fields: [saleId], references: [id], onDelete: Cascade)

  @@index([saleId])
}


model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  saleId    String   @db.ObjectId
  amount    Float
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale     @relation("SaleToPayment", fields: [saleId], references: [id], onDelete: Cascade)

  @@index([saleId])
}